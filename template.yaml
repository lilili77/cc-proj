AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.
Resources:

# ===== Image Bucket ===========================================================
  ImgBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicReadWrite

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImgBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ImgBucket
                - /*

# ===== LF0 ====================================================================

  LF0Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: LF0BasicExecutionInlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/proj-LF0:*

  LF0LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: '/aws/lambda/proj-LF0'
            RetentionInDays: 30

  LF0:
    Type: 'AWS::Serverless::Function'
    DependsOn: LF0LogGroup
    Properties:
      FunctionName: 'proj-LF0'
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./LF0
      Description: 'Lambda function that upload photo to s3 and call ML endpoint to return a string'
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LF0Role.Arn
      Environment:
        Variables:
          ImgBucket: !Ref ImgBucket

  LF0ApiInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LF0
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/image/*

# ===== LF1 ====================================================================

  LF1Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      # ManagedPolicyArns:
      #   - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
      #   - arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess
      Policies:
        - PolicyName: LF1BasicExecutionInlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/proj-LF1:*

  LF1LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: '/aws/lambda/proj-LF1'
            RetentionInDays: 30

  LF1:
    Type: 'AWS::Serverless::Function'
    DependsOn: LF1LogGroup
    Properties:
      FunctionName: 'proj-LF1'
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./LF1
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LF1Role.Arn

# ===== LF2 ====================================================================

  LF2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      # ManagedPolicyArns:
      #   - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
      #   - arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess
      Policies:
        - PolicyName: LF2BasicExecutionInlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/proj-LF2:*

  LF2LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: '/aws/lambda/proj-LF2'
            RetentionInDays: 30

  LF2:
    Type: 'AWS::Serverless::Function'
    DependsOn: LF2LogGroup
    Properties:
      FunctionName: 'proj-LF2'
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./LF2
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LF2Role.Arn


# ===== API gateway ============================================================

  RestApi :
    Type : AWS::ApiGateway::RestApi
    Properties :
      Body :
        swagger: "2.0"
        basePath: "/dev"
        schemes:
        - "https"
        paths:
          /image/{imgkey}:
            post:
              produces:
              - "application/json"
              parameters:
              - name: "imgkey"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Join
                  - ''
                  - - "arn:aws:apigateway:"
                    - !Sub ${AWS::Region}
                    - ":lambda:path/2015-03-31/functions/"
                    - !GetAtt LF0.Arn
                    - "/invocations"

                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "imgkey"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
        x-amazon-apigateway-binary-media-types:
        - "image/jpg"

      Parameters:
        endpointConfigurationTypes: REGIONAL

  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref RestApi
      Description: My deployment
      StageName: stage1

# ===== Databases ==============================================================

  SearchHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20

# ===== Outputs ============================================================
Outputs:
  ApiUrl:
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/stage1
