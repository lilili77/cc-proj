AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Complaza backend stack
Parameters:
  UserPoolIdentifier:
    Type: String
    Default: 210336890849:userpool/us-east-1_9ofMqoqMr

Resources:

# ===== Authentication ===========================================================
  
  ApiCognitoAuthorizer:          
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: 'method.request.header.Authorization'
      Name: ApiCognitoAuthorizer
      ProviderARNs:
        - !Sub 'arn:aws:cognito-idp:${AWS::Region}:${UserPoolIdentifier}'
      RestApiId: !Ref RestApi
      Type: COGNITO_USER_POOLS

# ===== Image Bucket ===========================================================
  
  ImgBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicReadWrite

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImgBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ImgBucket
                - /*

# ===== LF0 ====================================================================

  LF0Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: LF0BasicExecutionInlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/complaza-LF0:*

  LF0LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: '/aws/lambda/complaza-LF0'
            RetentionInDays: 30

  LF0:
    Type: 'AWS::Serverless::Function'
    DependsOn: LF0LogGroup
    Properties:
      FunctionName: 'complaza-LF0'
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./LF0
      Description: "Upload photo to s3 and call ML endpoint to return product names"
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LF0Role.Arn
      Environment:
        Variables:
          ImgBucket: !Ref ImgBucket

  LF0ApiInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LF0
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/image/*

# ===== LF1 ====================================================================

  LF1Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LF1BasicExecutionInlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/complaza-LF1:*

  LF1LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: '/aws/lambda/complaza-LF1'
            RetentionInDays: 30

  LF1:
    Type: 'AWS::Serverless::Function'
    DependsOn: LF1LogGroup
    Properties:
      FunctionName: 'complaza-LF1'
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./LF1
      Description: "Call 3rd party APIs to fullfil search and save to user's search history"
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LF1Role.Arn

  LF1ApiInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LF1
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/search/*

# ===== LF2 ====================================================================
  
  LF2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LF2BasicExecutionInlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/complaza-LF2:*

  LF2LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: '/aws/lambda/complaza-LF2'
            RetentionInDays: 30

  LF2:
    Type: 'AWS::Serverless::Function'
    DependsOn: LF2LogGroup
    Properties:
      FunctionName: 'complaza-LF2'
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./LF2
      Description: ''
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LF2Role.Arn

# ===== API gateway ============================================================
  
  RestApi :
    Type : AWS::ApiGateway::RestApi
    Properties :
      Parameters:
        endpointConfigurationTypes: REGIONAL
      Body :
        swagger: "2.0"
        info:
          version: "1"
          title: "Complaza API"
        basePath: "/stage1"
        schemes:
        - "https"
        paths:
          /image/{imgkey}:
            post:
              produces:
              - "application/json"
              parameters:
              - name: "imgkey"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Join
                  - ''
                  - - "arn:aws:apigateway:"
                    - !Sub ${AWS::Region}
                    - ":lambda:path/2015-03-31/functions/"
                    - !GetAtt LF0.Arn
                    - "/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "imgkey"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /product/{pid}:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "pid"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "pid"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /search:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Join
                  - ''
                  - - "arn:aws:apigateway:"
                    - !Sub ${AWS::Region}
                    - ":lambda:path/2015-03-31/functions/"
                    - !GetAtt LF1.Arn
                    - "/invocations"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /search/history:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /search/wishlist:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /wishlist/{uid}:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "uid"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "uid"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "uid"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
            securityDefinitions:
              ApiCognitoAuthorizer:
                type: apiKey
                name: Authorization
                in: header
                x-amazon-apigateway-authtype: cognito_user_pools
                x-amazon-apigateway-authorizer:
                  type: cognito_user_pools
                  providerARNs:
                    - !Sub arn:aws:cognito-idp:${AWS::Region}:${UserPoolIdentifier}
          /wishlist/{uid}/{pid}:
            delete:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "uid"
                in: "path"
                required: true
                type: "string"
              - name: "pid"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "uid"
                in: "path"
                required: true
                type: "string"
              - name: "pid"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
        x-amazon-apigateway-binary-media-types:
        - "image/jpg"

















      #   swagger: "2.0"
      #   info:
      #     description: "Project API"
      #     version: "1.0.0"
      #     title: "Project API"
      #   basePath: "/dev"
      #   schemes:
      #   - "https"
      #   paths:
      #     /image/{imgkey}:
      #       post:
      #         produces:
      #         - "application/json"
      #         parameters:
      #         - name: "imgkey"
      #           in: "path"
      #           required: true
      #           type: "string"
      #         responses:
      #           "200":
      #             description: "200 response"
      #             schema:
      #               $ref: "#/definitions/Empty"
      #             headers:
      #               Access-Control-Allow-Origin:
      #                 type: "string"
      #         x-amazon-apigateway-integration:
      #           httpMethod: "POST"
      #           uri: !Join
      #             - ''
      #             - - "arn:aws:apigateway:"
      #               - !Sub ${AWS::Region}
      #               - ":lambda:path/2015-03-31/functions/"
      #               - !GetAtt LF0.Arn
      #               - "/invocations"
      #
      #           responses:
      #             default:
      #               statusCode: "200"
      #               responseParameters:
      #                 method.response.header.Access-Control-Allow-Origin: "'*'"
      #           passthroughBehavior: "when_no_match"
      #           contentHandling: "CONVERT_TO_TEXT"
      #           type: "aws_proxy"
      #       options:
      #         consumes:
      #         - "application/json"
      #         produces:
      #         - "application/json"
      #         parameters:
      #         - name: "imgkey"
      #           in: "path"
      #           required: true
      #           type: "string"
      #         responses:
      #           "200":
      #             description: "200 response"
      #             schema:
      #               $ref: "#/definitions/Empty"
      #             headers:
      #               Access-Control-Allow-Origin:
      #                 type: "string"
      #               Access-Control-Allow-Methods:
      #                 type: "string"
      #               Access-Control-Allow-Headers:
      #                 type: "string"
      #         x-amazon-apigateway-integration:
      #           responses:
      #             default:
      #               statusCode: "200"
      #               responseParameters:
      #                 method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      #                 method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      #                 method.response.header.Access-Control-Allow-Origin: "'*'"
      #           requestTemplates:
      #             application/json: "{\"statusCode\": 200}"
      #           passthroughBehavior: "when_no_match"
      #           type: "mock"
      #   definitions:
      #     Empty:
      #       type: "object"
      #       title: "Empty Schema"
      #   x-amazon-apigateway-binary-media-types:
      #   - "image/jpg"
      #
      # Parameters:
      #   endpointConfigurationTypes: REGIONAL

  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref RestApi
      Description: Complaza api deployment
      StageName: stage1

# ===== Databases ==============================================================

  SearchHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20

  ProductTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20

  WishlistTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pid
          AttributeType: S
      KeySchema:
        - AttributeName: pid
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20

  PriceHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pid
          AttributeType: S
      KeySchema:
        - AttributeName: pid
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20

# ===== Outputs ============================================================
Outputs:
  ApiUrl:
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/stage1
